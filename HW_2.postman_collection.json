{
	"info": {
		"_postman_id": "e1652522-88c0-41c6-9bd4-0d24e4443915",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1.0",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200) \r",
							"});\r",
							"\r",
							"var textData = pm.response.text()\r",
							"pm.test(\"String \", function(){\r",
							"       pm.expect(textData).to.have.a(\"String\");\r",
							"});\r",
							"\r",
							"// pm.test(\"Body matches string\", function () {\r",
							"//     pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"// });\r",
							" "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "2.0",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"var name = jsonData.name;\r",
							"var age = parseInt(jsonData.age);\r",
							"var salary = +jsonData.salary;\r",
							"\r",
							"\r",
							"console.log(\"jsonData.name = \" + jsonData.name + \"  \" + typeof(jsonData.name))\r",
							"console.log(\"jsonData.age = \" + jsonData.age + \"  \" + typeof(jsonData.age))\r",
							"console.log(\"jsonData.salary = \" + jsonData.salary + \"  \" + typeof(jsonData.salary))\r",
							"\r",
							"pm.test(\"eql name\", function () {\r",
							"    pm.expect(name).to.eql(\"Andreu\");\r",
							"});\r",
							"\r",
							"pm.test(\"eql age\", function () {\r",
							"    pm.expect(age).to.eql(31)\r",
							"});\r",
							"\r",
							"pm.test(\"eql salary\", function () {\r",
							"    pm.expect(salary).to.eql(1500)\r",
							"})\r",
							"\r",
							"// name = JSON.parse(pm.request.body.formdata).name"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Andreu",
							"type": "text"
						},
						{
							"key": "age",
							"value": "31",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "2.1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"\r",
							"var resp = JSON.parse(responseBody);\r",
							"var resp_family = JSON.parse(responseBody).family\r",
							"var name = request.data.name\r",
							"var age = request.data.age\r",
							"var salary = request.data.salary\r",
							"\r",
							"// pm.environment.set('name', request.data.name)\r",
							"// pm.environment.set(\"age\", request.data.age)\r",
							"// pm.environment.set(\"salary\", request.data.salary)  if need a variable  \r",
							"\r",
							"pm.test(\"eql name 2\", function() {\r",
							"    pm.expect(name).to.eql(name)\r",
							"})\r",
							"pm.test(\"eql age 2\", function() {\r",
							"    pm.expect(age).to.eql(age)\r",
							"})\r",
							"pm.test(\"eql salary 2\", function() {\r",
							"    pm.expect(salary).to.eql(salary)\r",
							"})\r",
							"var salary_1_5_year = +resp_family.u_salary_1_5_year\r",
							"var resp_family = JSON.stringify(resp_family)\r",
							"\r",
							"\r",
							"console.log(\"family = \" + resp_family)\r",
							"console.log(\"salary 1,5 \" + salary_1_5_year)\r",
							"pm.test(\"eql salary 1.5 year\", function() {\r",
							"    var salary = request.data.salary\r",
							"    pm.expect(salary_1_5_year).to.eql(salary*4)\r",
							"})\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"// console.log(\"family = \" + resp_family)\r",
							"// console.log(\"jsonData.age = \" + jsonData.age + \"  \" + typeof(jsonData.age))\r",
							"// postman.setEnvironmentVariable(\"family\", JSON.stringify(request.data));\r",
							"\r",
							"\r",
							"// pm.test(\"Your test name\", function () {\r",
							"//     var jsonData = pm.response.json();\r",
							"//     pm.expect(jsonData.value).to.eql(100);\r",
							"// });\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Andreu",
							"type": "text"
						},
						{
							"key": "age",
							"value": "31",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "3.0",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Code 200\", function (){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// var reqBody = pm.request.toJSON().url.query\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"var resp = JSON.parse(responseBody)\r",
							"// 4. Спарсить request.\r",
							"var req = request.data\r",
							"var resp_str = JSON.stringify(resp)\r",
							"var name = resp_str.name\r",
							"var age = resp_str.age\r",
							"var salary = resp_str.salary\r",
							"var family = resp.family\r",
							"var family_str = JSON.stringify(family)\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"name\", function() {\r",
							"   pm.expect(name).to.eql(req.name); \r",
							"});\r",
							"pm.test(\"age\", function (){\r",
							"    pm.expect(age).to.eql(req.age);\r",
							"});\r",
							"pm.test(\"salary\", function (){\r",
							"    pm.expect(salary).to.eql(request.data.salary);\r",
							"});\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log(\"Family = \" + family_str)\r",
							"\r",
							"var dog = JSON.stringify(resp.family.pets.dog)\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"dog name\", function () {\r",
							"    pm.expect(dog).to.include(\"name\");\r",
							"});\r",
							"pm.test(\"dog age\", function(){\r",
							"    pm.expect(dog).to.include(\"name\")\r",
							"})\r",
							"\r",
							"pm.test(\"D.name\", function () {\r",
							"    pm.expect(resp.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							" pm.test(\"D.age\", function() {\r",
							"     pm.expect(resp.family.pets.dog.age).to.eql(4)\r",
							" })"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name=Andreu&age=31&salary=1500",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Andreu"
						},
						{
							"key": "age",
							"value": "31"
						},
						{
							"key": "salary",
							"value": "1500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "4.0",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Отправить запрос\r",
							"pm.sendRequest(\"http://162.55.220.72:5005\", (error, response) => {\r",
							"  if (error) {\r",
							"    console.log(error);\r",
							"  } else {\r",
							"  console.log(response);\r",
							"  }\r",
							"});\r",
							"// Статус код 200\r",
							"pm.test(\"Code 200\", function (){\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"// Спарсить response body в json.\r",
							"var resp = JSON.parse(responseBody)\r",
							"// Спарсить request.\r",
							"var req = pm.request.toJSON().url.query\r",
							"var req_name = req[0].value\r",
							"var req_age = parseInt(req[1].value)\r",
							"var req_salary = parseInt(req[2].value)\r",
							"var resp_salary = resp.salary\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"// Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"name\", function(){\r",
							"pm.expect(req_name).to.eql(resp.name)\r",
							"})\r",
							"pm.test(\"age\", function () {\r",
							"    pm.expect(req_age).to.eql(resp.age)\r",
							"})\r",
							"// Вывести в консоль параметр salary из request.\r",
							"// Вывести в консоль параметр salary из response.\r",
							"// Вывести в консоль 0-й элемент параметра salary из response.\r",
							"// Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"// Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"Request Salary = \" + req_salary )\r",
							"console.log(\"Response Salary = \" + resp_salary)\r",
							"console.log(\"Response Salary = \" + resp_salary[0])\r",
							"console.log(\"Response Salary = \" + resp_salary[1])\r",
							"console.log(\"Response Salary = \" + resp_salary[2])\r",
							"\r",
							"// Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"// Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"// Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"salary 1 \", function () {\r",
							"    pm.expect(req_salary).to.be.eql(resp_salary[0])\r",
							"})\r",
							"var resp_salary_2 = parseInt(resp_salary[1])\r",
							"var resp_salary_3 = parseInt(resp_salary[2])\r",
							"\r",
							"pm.test(\"salary 2\", function (){\r",
							"    pm.expect(req_salary*2).to.be.eql(resp_salary_2)\r",
							"})\r",
							"pm.test(\"salary 3\", function () {\r",
							"    pm.expect(req_salary*3).to.be.eql(resp_salary_3)\r",
							"})\r",
							"// Создать в окружении переменную name\r",
							"// Создать в окружении переменную age\r",
							"// Создать в окружении переменную salary\r",
							"pm.environment.get(\"name\");\r",
							"pm.environment.get(\"age\");\r",
							"pm.environment.get(\"salary\");\r",
							"// Передать в окружение переменную name\r",
							"// Передать в окружение переменную age\r",
							"// Передать в окружение переменную salary\r",
							"pm.environment.set(\"name\", req_name);\r",
							"pm.environment.set(\"age\", req_age);\r",
							"pm.environment.set(\"salary\", req_salary);\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for (let i =0; i <= 2; i++ ) {\r",
							"    console.log(resp_salary[i])\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Andreu&age=31&salary=1500",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Andreu"
						},
						{
							"key": "age",
							"value": "31"
						},
						{
							"key": "salary",
							"value": "1500"
						}
					]
				}
			},
			"response": []
		}
	]
}